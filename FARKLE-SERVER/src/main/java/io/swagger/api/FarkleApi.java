/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.68).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.RestDices;
import io.swagger.model.RestPlayer;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen")
@Validated
public interface FarkleApi {

    @Operation(summary = "", description = "bank the current player", tags={  })
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "ok ?", content = @Content(mediaType = "application/json", schema = @Schema(implementation = String.class))) })
    @RequestMapping(value = "/bank", produces = { "application/json" }, method = RequestMethod.POST)
    ResponseEntity<String> bank();

    @Operation(summary = "", description = "return the total of all selected dices in this turn", tags={  })
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "potential acumulated points for this turn", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Integer.class))) })
    @RequestMapping(value = "/actualTurnPoints", produces = { "application/json" }, method = RequestMethod.GET)
    ResponseEntity<Integer> getActualTurnPoints();

    @Operation(summary = "", description = "return the current Player if game started, -1 if game not yet started", tags={  })
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "current Player ID", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Integer.class))) })
    @RequestMapping(value = "/currentPlayerId", produces = { "application/json" }, method = RequestMethod.GET)
    ResponseEntity<Integer> getCurrentPlayerID();

    @Operation(summary = "", description = "return the arrays of Dices on the Plate", tags={  })
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "arrays of Dices on the Plate", content = @Content(mediaType = "application/json", schema = @Schema(implementation = RestDices.class))) })
    @RequestMapping(value = "/dicesPlate", produces = { "application/json" }, method = RequestMethod.GET)
    ResponseEntity<RestDices> getDicesPlates();

    @Operation(summary = "", description = "return the asked Player", tags={  })
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "return the asked player", content = @Content(mediaType = "application/json", schema = @Schema(implementation = RestPlayer.class))) })
    @RequestMapping(value = "/player{id}", produces = { "application/json" }, method = RequestMethod.GET)
    ResponseEntity<RestPlayer> getPlayer(@Parameter(description = "", required = true) @PathVariable("id") Integer id);

    @Operation(summary = "", description = "return the arrays of Selected Dices", tags={  })
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "arrays of Selected Dices", content = @Content(mediaType = "application/json", schema = @Schema(implementation = RestDices.class))) })
    @RequestMapping(value = "/selectedDices", produces = { "application/json" }, method = RequestMethod.GET)
    ResponseEntity<RestDices> getSelectedDices();

    @Operation(summary = "", description = "return 0 if nothing change, 1 if something append", tags={  })
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Integer.class))) })
    @RequestMapping(value = "/stateChanged", produces = { "application/json" }, method = RequestMethod.GET)
    ResponseEntity<Integer> getState();

    @Operation(summary = "", description = "return the winning Player or error if game not yet finished", tags={  })
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "", content = @Content(mediaType = "application/json", schema = @Schema(implementation = RestPlayer.class))) })
    @RequestMapping(value = "/winner", produces = { "application/json" }, method = RequestMethod.GET)
    ResponseEntity<RestPlayer> getWinner();

    @Operation(summary = "", description = "log a player with a given name ; return the logged player if successfull. If more than two players return an error", tags={  })
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "player logged", content = @Content(mediaType = "application/json", schema = @Schema(implementation = RestPlayer.class))) })
    @RequestMapping(value = "/name", produces = { "application/json" }, method = RequestMethod.POST)
    ResponseEntity<RestPlayer> name(@Valid @RequestParam(value = "name", required = false) String name);

    @Operation(summary = "", description = "logout a player and terminate the actual play", tags={  })
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "ok ?", content = @Content(mediaType = "application/json", schema = @Schema(implementation = String.class))) })
    @RequestMapping(value = "/quit", produces = { "application/json" }, method = RequestMethod.POST)
    ResponseEntity<String> quit(@Valid @RequestParam(value = "playerId", required = false) Integer playerId);

    @Operation(summary = "", description = "roll the dices on the plate", tags={  })
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "ok ?", content = @Content(mediaType = "application/json", schema = @Schema(implementation = String.class))) })
    @RequestMapping(value = "/roll", produces = { "application/json" }, method = RequestMethod.POST)
    ResponseEntity<String> roll();

    @Operation(summary = "", description = "select the given dices (e.g. 5 1 1)", tags={  })
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "ok ?", content = @Content(mediaType = "application/json", schema = @Schema(implementation = String.class))) })
    @RequestMapping(value = "/select", produces = { "application/json" }, method = RequestMethod.POST)
    ResponseEntity<String> select(@Valid @RequestParam(value = "dices", required = false) String dices);

}